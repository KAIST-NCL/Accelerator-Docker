diff --git a/Makefile b/Makefile
index cbe4bf2..8a56858 100644
--- a/Makefile
+++ b/Makefile
@@ -30,7 +30,7 @@ SHELL := $(shell command -v bash 2>/dev/null)
 .DEFAULT: runc
 
 runc: $(SOURCES)
-	$(GO) build -buildmode=pie $(EXTRA_FLAGS) -ldflags "-X main.gitCommit=${COMMIT} -X main.version=${VERSION} $(EXTRA_LDFLAGS)" -tags "$(BUILDTAGS)" -o runc .
+	$(GO) build -buildmode=pie $(EXTRA_FLAGS) -ldflags "-X main.gitCommit=${COMMIT} -X main.version=${VERSION} $(EXTRA_LDFLAGS)" -tags "$(BUILDTAGS)" -o acc-runtime .
 
 all: runc recvtty
 
diff --git a/libcontainer/rootfs_linux.go b/libcontainer/rootfs_linux.go
index 421abf6..5a4f42a 100644
--- a/libcontainer/rootfs_linux.go
+++ b/libcontainer/rootfs_linux.go
@@ -86,6 +86,21 @@ func prepareRootfs(pipe io.ReadWriter, iConfig *initConfig) (err error) {
 		return err
 	}
 
+        //Accelerator-Docker : Temporal way for setting environmental variables!
+        tmp_path := path.Join(config.Rootfs,".tmp_env")
+        if _, err := os.Stat(tmp_path); !os.IsNotExist(err) {
+                buf, _ := ioutil.ReadFile(tmp_path)
+                data := string(buf)
+                lines := strings.Split(data,"\n")
+                for _, line := range lines {
+                        env := strings.Split(line,"=")
+                        if(len(env) == 2){
+                                os.Setenv(env[0],env[1])
+                        }
+                }
+                os.Remove(tmp_path)
+        }
+
 	// The reason these operations are done here rather than in finalizeRootfs
 	// is because the console-handling code gets quite sticky if we have to set
 	// up the console before doing the pivot_root(2). This is because the
diff --git a/utils.go b/utils.go
index 5165336..a36e6b3 100644
--- a/utils.go
+++ b/utils.go
@@ -3,6 +3,7 @@ package main
 import (
 	"fmt"
 	"os"
+	"os/exec"
 	"path/filepath"
 	"strconv"
 	"strings"
@@ -54,6 +55,26 @@ func fatal(err error) {
 	os.Exit(1)
 }
 
+func addACCHook(context *cli.Context, spec *specs.Spec) error {
+	path, err := exec.LookPath("acc-runtime-hook")
+	if err != nil {
+		return err
+	}
+	args := []string{path}
+	if spec.Hooks == nil {
+		spec.Hooks = &specs.Hooks{}
+	}
+	spec.Hooks.Prestart = append(spec.Hooks.Prestart, specs.Hook{
+		Path: path,
+		Args: append(args, "prestart"),
+	})
+	spec.Hooks.Poststop = append(spec.Hooks.Poststop, specs.Hook{
+		Path: path,
+		Args: append(args, "poststop"),
+	})
+	return nil
+}
+
 // setupSpec performs initial setup based on the cli.Context for the container
 func setupSpec(context *cli.Context) (*specs.Spec, error) {
 	bundle := context.String("bundle")
@@ -66,6 +87,10 @@ func setupSpec(context *cli.Context) (*specs.Spec, error) {
 	if err != nil {
 		return nil, err
 	}
+
+	if err = addACCHook(context, spec); err != nil {
+		return nil, err
+	}
 	return spec, nil
 }
 
